// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Board = require("./Board.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Score = require("./Score.js");
var React = require("react");
var Button = require("./Button.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("App");

function computeTimeout(score) {
  return 1000 - Caml_int32.imul(20, score) | 0;
}

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* game */0];
              return React.createElement("div", {
                          className: "app"
                        }, match ? React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, Board.make(self[/* state */1][/* activeIx */2], (function (index) {
                                          return Curry._1(self[/* send */3], /* Hit */Block.__(0, [index]));
                                        }), self[/* state */1][/* clickedIx */3], /* array */[])), ReasonReact.element(undefined, undefined, Score.make(self[/* state */1][/* score */1], /* array */[]))) : ReasonReact.element(undefined, undefined, Button.make("Start game!", (function (param) {
                                      return Curry._1(self[/* send */3], /* StartGame */0);
                                    }), /* array */[])));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* game : Waiting */0,
                      /* score */0,
                      /* activeIx */-1,
                      /* clickedIx */-1
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* game : Playing */1,
                            /* score */0,
                            /* activeIx */state[/* activeIx */2],
                            /* clickedIx */-1
                          ],
                          (function (self) {
                              setTimeout((function (param) {
                                      var nextActive = Js_math.random_int(0, 9);
                                      return Curry._1(self[/* send */3], /* Appear */Block.__(1, [nextActive]));
                                    }), computeTimeout(self[/* state */1][/* score */1]));
                              return /* () */0;
                            })
                        ]);
              } else if (action.tag) {
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* game */state[/* game */0],
                            /* score */state[/* score */1],
                            /* activeIx */action[0],
                            /* clickedIx */-1
                          ],
                          (function (self) {
                              setTimeout((function (param) {
                                      var nextActive = Js_math.random_int(0, 9);
                                      return Curry._1(self[/* send */3], /* Appear */Block.__(1, [nextActive]));
                                    }), computeTimeout(self[/* state */1][/* score */1]));
                              return /* () */0;
                            })
                        ]);
              } else {
                var index = action[0];
                if (index === state[/* activeIx */2]) {
                  return /* Update */Block.__(0, [/* record */[
                              /* game */state[/* game */0],
                              /* score */state[/* score */1] + 1 | 0,
                              /* activeIx */state[/* activeIx */2],
                              /* clickedIx */index
                            ]]);
                } else {
                  return /* NoUpdate */0;
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.computeTimeout = computeTimeout;
exports.make = make;
/* component Not a pure module */
